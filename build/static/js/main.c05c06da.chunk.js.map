{"version":3,"sources":["components/TodoItem/TodoItem.js","components/Header.js","components/InputTodo.js","components/ToDoContainer.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","className","type","checked","completed","onChange","handleChange","id","title","onClick","deleteTodoHandler","Header","Form","state","correctLength","onChangeHandler","e","setState","target","value","onUpdateHandler","preventDefault","length","addTodo","onSubmit","this","placeholder","Component","TodoContainer","todos","uuidv4","onChangeCheckbox","updatedTodosArr","map","todo","deleteTodosArr","filter","newItem","newItemUpdate","newArr","push","console","log","key","React","App","text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mRAiBeA,G,MAdE,SAACC,GACd,OACI,wBAAIC,UAAU,aACV,2BACIC,KAAK,WACLC,QAASH,EAAMI,UACfC,SAAU,kBAAML,EAAMM,aAAaN,EAAMO,OAE7C,0BAAMN,UAAYD,EAAMI,UAAY,iBAAmB,MAAQJ,EAAMQ,OACrE,4BAAQC,QAAS,kBAAIT,EAAMU,kBAAkBV,EAAMO,MAAnD,aCDGI,EATA,WACX,OACI,6BACI,yCACA,iECyCGC,E,4MA5CXC,MAAM,CACFL,MAAO,GACPM,eAAe,G,EAEnBC,gBAAkB,SAACC,GACf,EAAKC,SAAS,CAACT,MAAMQ,EAAEE,OAAOC,S,EAElCC,gBAAkB,SAACJ,GACfA,EAAEK,iBAEC,EAAKR,MAAML,MAAMc,OAAQ,GAAK,EAAKT,MAAML,MAAMc,OAAS,IACvD,EAAKtB,MAAMuB,QAAQ,EAAKV,OAExB,EAAKI,SAAS,CACVT,MAAO,GACPM,eAAe,KAGnB,EAAKG,SAAS,CACVH,eAAe,K,uDAKvB,OACI,0BAAMb,UAAY,iBAAiBuB,SAAYC,KAAKL,iBAChD,2BACAnB,UAAW,aACXC,KAAK,OACLwB,YAAY,OACZP,MAAOM,KAAKZ,MAAML,MAClBH,SAAWoB,KAAKV,kBAChB,2BACAb,KAAK,SACLiB,MAAM,SACNlB,UAAW,iBAEVwB,KAAKZ,MAAMC,cAAgB,KAAO,2E,GAtChCa,a,QC6FJC,E,4MAtFXf,MAAQ,CACJgB,MAAO,CACH,CACItB,GAAIuB,cACJtB,MAAO,eACPJ,WAAW,GAEf,CACIG,GAAIuB,cACJtB,MAAO,yCACPJ,WAAW,GAEf,CACIG,GAAIuB,cACJtB,MAAO,kBACPJ,WAAW,K,EAKvB2B,iBAAmB,SAACxB,GAClB,IAAMyB,EAAkB,EAAKnB,MAAMgB,MAAMI,KAAI,SAAAC,GAIzC,OAHGA,EAAK3B,KAAOA,IACX2B,EAAK9B,WAAa8B,EAAK9B,WAEpB8B,KAGX,EAAKjB,SAAU,CACXY,MAAOG,K,EAIbtB,kBAAoB,SAACH,GACnB,IAAM4B,EAAiB,EAAKtB,MAAMgB,MAAMO,QAAO,SAAAF,GAAI,OAAIA,EAAK3B,KAAOA,KACjE,EAAKU,SAAU,CACbY,MAAOM,K,EAIbZ,QAAU,SAACc,GACT,IAAIC,EAAe,CAAC/B,GAAIuB,cACZtB,MAAO6B,EAAQ7B,MACfJ,WAAW,GAEjBmC,EAAM,YAAO,EAAK1B,MAAMgB,OAC9BU,EAAOC,KAAKF,GACZ,EAAKrB,SAAS,CACZY,MAAOU,IAETE,QAAQC,IAAI,EAAK7B,MAAMgB,Q,uDAEf,IAAD,OACL,OACI,yBAAK5B,UAAU,aACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMsB,QAAWE,KAAKF,UACtB,4BAEQE,KAAKZ,MAAMgB,MAAMI,KAAI,SAAAC,GAAI,OACrB,kBAAC,EAAD,CACIS,IAAKT,EAAK3B,GACVA,GAAI2B,EAAK3B,GACTC,MAAO0B,EAAK1B,MACZJ,UAAW8B,EAAK9B,UAChBE,aAAc,EAAKyB,iBACnBrB,kBAAmB,EAAKA,6B,GApE5BkC,IAAMjB,W,MCKnBkB,MARf,WACE,OACE,yBAAK5C,UAAU,OACb,kBAAC,EAAD,CAAe6C,KAAK,mCCKNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.c05c06da.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./TodoItem.scss\";\n\nconst TodoItem = (props) => {\n    return (\n        <li className=\"todo-item\">\n            <input \n                type=\"checkbox\" \n                checked={props.completed} \n                onChange={() => props.handleChange(props.id)}>\n            </input>\n            <span className={ props.completed ? \"completedStyle\" : null} >{props.title}</span>\n            <button onClick={()=>props.deleteTodoHandler(props.id)}>Delete</button>\n        </li>\n    )\n}\n\nexport default TodoItem","import React from 'react';\n\nconst Header = () => {\n    return (\n        <div>\n            <h1>To Do App</h1>\n            <p>Add, Edit or Delete a Todo Item.</p>\n        </div>\n    )\n}\n\nexport default Header;","import React, { Component} from 'react';\n\nclass Form extends Component {\n    state={\n        title: \"\",\n        correctLength: true\n    };\n    onChangeHandler = (e) => {\n        this.setState({title:e.target.value})\n    }\n    onUpdateHandler = (e) => {\n        e.preventDefault();\n        // correct length\n        if(this.state.title.length >3 && this.state.title.length < 25 ) {\n            this.props.addTodo(this.state);\n            // clear title and therefore text input\n            this.setState({\n                title: \"\",\n                correctLength: true\n            });\n        } else { // incorrect length\n            this.setState({\n                correctLength: false\n            });\n        }\n    }\n    render() {\n        return (\n            <form className = \"form-container\" onSubmit = {this.onUpdateHandler}>\n                <input \n                className= \"input-text\"\n                type=\"text\" \n                placeholder=\"ToDo\" \n                value={this.state.title} \n                onChange={ this.onChangeHandler} />\n                <input \n                type=\"submit\" \n                value=\"Submit\"\n                className= \"input-submit\"\n                />\n                {this.state.correctLength ? null : <p>\"Text muss zwischen 3-25 zeichen haben\"</p>}\n            </form>\n            \n        );\n    }\n}\n\nexport default Form;\n","import React from 'react';\nimport TodoItem from \"./TodoItem/TodoItem\";\nimport Header from \"./Header\";\nimport Form from \"./InputTodo\"\nimport { v4 as uuidv4 } from 'uuid';\n\n// class component\nclass TodoContainer extends React.Component {\n\n    state = {\n        todos: [\n            {\n                id: uuidv4(),\n                title: \"React lernen\",\n                completed: false\n            },\n            {\n                id: uuidv4(),\n                title: \"JavaScript auffrischen (Klassen, usw.)\",\n                completed: false\n            },\n            {\n                id: uuidv4(),\n                title: \"Props verstehen\",\n                completed: false\n            }\n        ]\n    }\n\n    onChangeCheckbox = (id) => {\n      const updatedTodosArr = this.state.todos.map(todo => {\n          if(todo.id === id) {\n              todo.completed = !todo.completed;\n          }\n          return todo;\n      })\n      // console.log(updatedTodosArr);\n      this.setState( {\n          todos: updatedTodosArr\n      } );\n  }\n\n    deleteTodoHandler = (id) => {\n      const deleteTodosArr = this.state.todos.filter(todo => todo.id !== id) \n        this.setState( {\n          todos: deleteTodosArr\n      } );\n    \n    }\n    addTodo = (newItem) => {\n      let newItemUpdate= {id: uuidv4(),\n                  title: newItem.title,\n                  completed: false\n                } \n      const newArr = [...this.state.todos]\n      newArr.push(newItemUpdate)  \n      this.setState({\n        todos: newArr\n      })\n      console.log(this.state.todos)\n    }\n    render() {\n        return (\n            <div className=\"container\">\n                <Header />\n                <Form addTodo = {this.addTodo}/>\n                <ul>\n                    {\n                        this.state.todos.map(todo => (\n                            <TodoItem\n                                key={todo.id}\n                                id={todo.id}\n                                title={todo.title}\n                                completed={todo.completed}\n                                handleChange={this.onChangeCheckbox}\n                                deleteTodoHandler={this.deleteTodoHandler}\n                              />\n                        ))\n                    }\n                </ul>\n            </div>\n        );\n    }\n}\n\n// functional component\n// const TodoContainerFunction = (props) => {\n\n//     return (\n//         <div>\n//             <h1>Hi, ich bin der TodoContainer!</h1>\n//             <p>{props.text}</p>\n//         </div>);\n// };\n\nexport default TodoContainer;\n","import React from 'react';\nimport TodoContainer from './components/ToDoContainer';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoContainer text=\"Mein Text kommt als property\"/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}